;; Object elisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "elisp/"
  :tables (list 
   (semanticdb-table "nc.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("nc-version" variable (:constant-flag t :default-value "1.5") nil [6270 6376]) ("nc-load-fonts-from" variable (:user-visible-flag t :default-value (quote font-lock)) nil [6407 6519]) ("nc-highlight-face" variable (:user-visible-flag t :default-value (quote secondary-selection)) nil [6520 6599]) ("nc-select-face" variable (:user-visible-flag t :default-value (quote region)) nil [6600 6661]) ("nc-bold-face" variable (:user-visible-flag t :default-value (quote font-lock-keyword-face)) nil [6662 6738]) ("nc-dir-face" variable (:user-visible-flag t :default-value (quote font-lock-string-face)) nil [6739 6809]) ("if" code nil nil [6811 6887]) ("nc-highlight-background-color" variable (:user-visible-flag t :default-value "DarkSlateGray") nil [6905 6995]) ("nc-highlight-foreground-color" variable (:user-visible-flag t :default-value "Yellow") nil [6996 7079]) ("nc-select-foreground-color" variable (:user-visible-flag t :default-value "DarkSlateGray") nil [7080 7165]) ("nc-select-background-color" variable (:user-visible-flag t :default-value "Green") nil [7166 7243]) ("nc-time-format" variable (:user-visible-flag t :default-value "%H:%M") nil [7245 7312]) ("nc-date-format" variable (:user-visible-flag t :default-value "%d-%m-%y") nil [7314 7384]) ("nc-date-time-format" variable (:user-visible-flag t :default-value (concat nc-date-format " " nc-time-format)) nil [7386 7502]) ("nc-sort-by" variable (:user-visible-flag t :default-value (quote name)) nil [7504 7560]) ("nc-sort-case-insensitive" variable (:user-visible-flag t :default-value (eq system-type (quote emx))) nil [7562 7667]) ("nc-columns" variable (:user-visible-flag t :default-value 3) nil [7669 7720]) ("nc-sort-reversed" variable (:user-visible-flag t) nil [7722 7801]) ("nc-sort-dir-first" variable (:user-visible-flag t :default-value t) nil [7803 7878]) ("nc-dosish" variable (:user-visible-flag t :default-value (memq system-type (quote (ms-dos emx)))) nil [7880 7969]) ("nc-horiz-line-char" variable (:default-value (if nc-dosish 205 61)) nil [7971 8080]) ("nc-verti-line-char" variable (:default-value (if nc-dosish 179 124)) nil [8082 8189]) ("nc-secondary-verti-line-char" variable (:default-value (if nc-dosish 124 32)) nil [8191 8317]) ("nc-name-too-long-char" variable (:default-value (if nc-dosish 175 62)) nil [8319 8427]) ("nc-name-too-long-string" variable (:default-value (char-to-string nc-name-too-long-char)) nil [8429 8554]) ("if" code nil nil [8556 8656]) ("nc-suffix-length" variable (:default-value (cond ((eql system-type (quote ms-dos)) 3) (t 0))) nil [8658 8782]) ("nc-show-list" variable (:user-visible-flag t) nil [8784 8850]) ("nc-select-dir" variable (:user-visible-flag t :default-value t) nil [8852 8935]) ("nc-select-by-regexp" variable (:user-visible-flag t) nil [8937 9040]) ("nc-select-dir-wild" variable (:user-visible-flag t) nil [9042 9133]) ("nc-deselect-dir-wild" variable (:user-visible-flag t :default-value t) nil [9135 9228]) ("nc-default-action" variable (:default-value (quote view)) nil [9230 9314]) ("nc-show-shell" variable (:default-value t) nil [9316 9396]) ("nc-total-size-selected" variable nil nil [9398 9429]) ("nc-total-size-files" variable nil nil [9431 9459]) ("nc-write-totals" variable (:user-visible-flag t :default-value t) nil [9461 9564]) ("nc-write-header" variable (:user-visible-flag t :default-value t) nil [9566 9652]) ("nc-num-files" variable nil nil [9654 9675]) ("nc-files" variable nil nil [9677 9935]) ("nc-buffers" function nil nil [9937 10008]) ("set-nc-buffers" function (:arguments ("val")) nil [10010 10116]) ("nc-parent-dir" function nil nil [10118 10408]) ("nc-tmp-buf" variable (:default-value " *NC tmp*") nil [10410 10441]) ("nc-shell-buf" variable (:default-value "*NC shell*") nil [10442 10476]) ("nc-cursor-overlay" variable (:default-value (make-overlay 0 0)) nil [10478 10523]) ("nc-dir-overlay" variable (:default-value (make-overlay 0 0)) nil [10524 10566]) ("nc-select-overlay" variable (:default-value (make-overlay 0 0)) nil [10567 10612]) ("nc-modeline" variable nil nil [10613 10633]) ("nc-dotdot" variable nil nil [10634 10652]) ("nc-associated-nc-buffer" variable nil nil [10653 10727]) ("nc-dir-types" variable (:default-value (quote (directory ((copy . nc-copy-file) (move . nc-move-file) (delete . nc-delete-file-or-directory))))) nil [10728 10865]) ("nc-mode" function (:user-visible-flag t :arguments ("&optional" "no-reset" "keep-size")) nil [10907 18064]) ("nc-version" function (:user-visible-flag t) nil [18081 18213]) ("defalias" code nil nil [18230 18253]) ("nc-panes" variable nil nil [18277 18331]) ("nc-other" variable nil nil [18333 18384]) ("cond" code nil nil [18430 18875]) ("nc-mode-map" variable (:default-value (make-sparse-keymap)) nil [18877 18946]) ("nc-local-esc-map" variable (:default-value (copy-keymap esc-map)) nil [18948 19042]) ("nc-local-map" variable nil nil [19044 19103]) ("nc-wd" variable (:default-value (if (eql system-type (quote ms-dos)) 12 (- (/ (- (frame-width) 1) 2) 1))) nil [19105 19227]) ("nc-cl" variable (:default-value (if (eql system-type (quote ms-dos)) 12 (- (/ nc-wd nc-columns) 1))) nil [19229 19339]) ("nc-sb" variable nil nil [19341 19402]) ("nc-pane-end" variable nil nil [19404 19473]) ("nc-cursor-col" variable nil nil [19475 19535]) ("nc-cursor-lin" variable nil nil [19536 19594]) ("nc-first-column" variable nil nil [19595 19660]) ("nc-format" variable nil nil [19661 19733]) ("nc-format-align-right" variable nil nil [19734 19813]) ("nc-title-start" variable nil nil [19814 19883]) ("nc-title-end" variable nil nil [19884 19949]) ("nc-active-nc-buffer" variable nil nil [19950 20017]) ("nc-selected-files" variable nil nil [20018 20102]) ("nc-file-mod" variable nil nil [20103 20184]) ("nc-nl" variable (:default-value (if (eql system-type (quote ms-dos)) 18 (- (frame-height) 7))) nil [20186 20297]) ("nc-number-to-string" function (:arguments ("num")) nil [20299 20453]) ("nc-total-size" function (:arguments ("list")) nil [20455 20599]) ("define-key" code nil nil [20601 20656]) ("nc-absolute-from-relative-pos" function (:arguments ("col" "lin")) nil [20658 20896]) ("nc-relative-from-absolute-pos" function (:arguments ("pos")) nil [20898 21240]) ("nc-toggle-show-size" function (:user-visible-flag t) nil [21242 21497]) ("nc-toggle-show-date" function (:user-visible-flag t) nil [21499 21754]) ("nc-toggle-show-time" function (:user-visible-flag t) nil [21756 22011]) ("nc-toggle-show-attr" function (:user-visible-flag t) nil [22013 22268]) ("nc-filename-norm" function (:arguments ("list")) nil [22270 25671]) ("nc-sort-reversed-xor" function (:arguments ("x" "y" "val")) nil [25673 25925]) ("nc-sort-dired-files" function (:arguments ("files")) nil [25927 27394]) ("nc-file-attributes-list" function (:arguments ("name")) nil [27396 28490]) ("nc-dired-to-list" function (:arguments ("name")) nil [28492 28812]) ("nc-adjust-and-show" function (:arguments ("&optional" "soft" "screen" "no-right-align" "no-frame" "totals" "no-cursor")) nil [28814 29128]) ("nc-adjust-screen" function (:arguments ("&optional" "soft" "no-right-align")) nil [29130 30557]) ("nc-cursor-left" function (:user-visible-flag t :arguments ("n")) nil [30559 30668]) ("nc-cursor-pane-left" function (:user-visible-flag t :arguments ("n")) nil [30674 30801]) ("nc-cursor-pane-right" function (:user-visible-flag t :arguments ("n")) nil [30807 30932]) ("nc-cursor-up" function (:user-visible-flag t) nil [30938 31336]) ("nc-cursor-right" function (:user-visible-flag t :arguments ("n")) nil [31338 32084]) ("nc-cursor-home" function (:user-visible-flag t) nil [32086 32346]) ("nc-cursor-end" function (:user-visible-flag t) nil [32348 32755]) ("nc-cursor-down" function (:user-visible-flag t) nil [32757 33202]) ("nc-set-cursor" function (:user-visible-flag t :arguments ("&optional" "click")) nil [33204 34272]) ("nc-other-buffer" function (:user-visible-flag t) nil [34274 34524]) ("nc-valid-dirname-p" function (:arguments ("name")) nil [34526 34617]) ("nc-rescan" function (:user-visible-flag t) nil [34656 34938]) ("nc-display-new-dir" function (:user-visible-flag t :arguments ("&optional" "dir" "do-not-update-shell")) nil [34940 35583]) ("nc-act-on-line-mouse" function (:user-visible-flag t) nil [35585 36336]) ("nc-act-on-line" function (:user-visible-flag t) nil [36341 37346]) ("nc-bufferkill-or-nc" function (:user-visible-flag t) nil [37348 37638]) ("nc-bufferkill" function (:user-visible-flag t) nil [37640 37988]) ("nc-bufferswitch" function (:user-visible-flag t) nil [37990 38354]) ("nc-set-local-keys" function nil nil [38356 39089]) ("nc-view-or-edit" function (:arguments ("read-only")) nil [39091 39686]) ("nc-edit" function (:user-visible-flag t) nil [39688 39788]) ("nc-view" function (:user-visible-flag t) nil [39790 39888]) ("nc-num-from-col-lin" function (:arguments ("col" "lin")) nil [39890 39983]) ("nc-col-from-num" function (:arguments ("num")) nil [39985 40056]) ("nc-lin-from-num" function (:arguments ("num" "&optional" "col")) nil [40058 40219]) ("nc-delete-selected-files" function nil nil [40226 40451]) ("nc-convert-to-regexp" function (:arguments ("pattern")) nil [40459 41182]) ("nc-select-hist" variable (:default-value (quote ("*"))) nil [41184 41214]) ("nc-toggle-selected" function (:user-visible-flag t) nil [41216 41933]) ("nc-select-deselect-pattern" function (:arguments ("pat" "deselect" "regexp")) nil [41935 43233]) ("nc-deselect-pattern" function (:user-visible-flag t) nil [43235 43388]) ("nc-select-pattern" function (:user-visible-flag t) nil [43390 43541]) ("nc-deselect-regexp" function (:user-visible-flag t) nil [43547 43671]) ("nc-select-regexp" function (:user-visible-flag t) nil [43673 43795]) ("nc-select" function (:user-visible-flag t) nil [43801 44725]) ("nc-change-drive" function (:user-visible-flag t) nil [44727 45270]) ("nc-mkdir" function (:user-visible-flag t :arguments ("name")) nil [45276 46014]) ("nc-save-selections" function nil nil [46016 46262]) ("nc-restore-selections" function nil nil [46264 46568]) ("nc-update-current-file" function (:user-visible-flag t :arguments ("buff")) nil [46576 46938]) ("nc-update-all-modifications" function (:arguments ("modi" "source-p" "dest-p")) nil [46940 47456]) ("nc-update-modifications" function (:arguments ("modi" "source-p" "dest-p" "active")) nil [47458 50314]) ("nc-get-other-default-dir" function nil nil [50316 50633]) ("nc-get-target-file" function (:arguments ("command" "&optional" "default-dir" "default-name")) nil [50635 51049]) ("nc-get-target-dir" function (:arguments ("command" "&optional" "default-dir")) nil [51051 51505]) ("nc-get-files-to-operate" function nil nil [51507 52431]) ("nc-get-target-dir-or-file" function (:arguments ("command" "&optional" "nodest" "target-dir")) nil [52433 53141]) ("nc-check-file-op" function (:arguments ("destname" "operation" "ovwrt")) nil [53143 54179]) ("nc-move-or-copy-file" function (:arguments ("sourcename" "destname" "ovwrt" "op" "self" "operation")) nil [54182 55481]) ("nc-copy-file" function (:arguments ("sourcename" "destname" "ovwrt")) nil [55483 55727]) ("nc-move-file" function (:arguments ("sourcename" "destname" "ovwrt")) nil [55729 55927]) ("nc-delete-file" function (:arguments ("sourcename" "destname" "ovwrt")) nil [55929 56245]) ("nc-delete-file-or-directory" function (:arguments ("name" "prompt")) nil [56247 56977]) ("nc-operate-on-files" function (:arguments ("sourcdest" "operation" "&optional" "ask")) nil [56979 57628]) ("nc-here" variable nil nil [57630 57650]) ("nc-copy-here" function (:user-visible-flag t) nil [57652 57814]) ("nc-move-here" function (:user-visible-flag t) nil [57816 57988]) ("nc-copy" function (:user-visible-flag t :arguments ("target")) nil [57990 58313]) ("nc-move" function (:user-visible-flag t :arguments ("target" "&optional" "here")) nil [58389 58742]) ("nc-delete" function (:user-visible-flag t :arguments ("target")) nil [58818 59107]) ("nc-dirsize" function (:user-visible-flag t :arguments ("target")) nil [59183 59881]) ("nc-sort-one-buffers-files" function nil nil [59883 60097]) ("nc-set-size" function nil nil [60099 61384]) ("nc-redraw" function (:user-visible-flag t :arguments ("&optional" "no-reset")) nil [61386 62448]) ("nc-set-columns" function (:user-visible-flag t) nil [62452 62606]) ("nc-columns-set" function (:arguments ("num")) nil [62608 62728]) ("nc-sort-by-name" function nil nil [62730 62851]) ("nc-sort-by-time" function nil nil [62853 62974]) ("nc-sort-by-size" function nil nil [62978 63099]) ("nc-sort-by-ext" function nil nil [63103 63221]) ("nc-sort-by-long-ext" function nil nil [63225 63358]) ("nc-sort-reverse" function nil nil [63362 63467]) ("nc-byte-compile" function (:user-visible-flag t) nil [63471 63910]) ("nc-byte-compile-one-file" function (:arguments ("name")) nil [64570 64867]) ("nc-quit" function (:user-visible-flag t :arguments ("flag")) nil [64869 65453]) ("nc-define-drive-keys" function nil nil [65455 66398]) ("nc-set-keys" function nil nil [66400 72505]) ("nc-setup-current-buffer" function (:arguments ("other")) nil [72507 74318]) ("nc-deselect-buffer" function nil nil [74320 74580]) ("nc-select-buffer" function nil nil [74582 75023]) ("nc-shell-buf-keymap" variable nil nil [75025 75057]) ("nc-setup-shell-buf" function (:arguments ("b")) nil [75059 78807]) ("nc-sh-escesc" function (:user-visible-flag t) nil [78809 78959]) ("nc-sh-end" function nil nil [78961 79120]) ("nc-sh-begin" function nil nil [79122 79292]) ("shell-cd" function (:arguments ("after" "nc-sh-catch-cd" "dir" "activate")) nil [79294 79658]) ("nc-sh-delegate" function nil nil [79660 80080]) ("nc-sh-process-cd" function (:arguments ("dir")) nil [80082 80632]) ("nc-switch-to-buffers" function (:arguments ("&optional" "keep-size")) nil [80634 83315]) ("nc-setup-cursor" function nil nil [83317 83584]) ("nc-delete-cursor" function (:arguments ("col" "lin")) nil [83586 83975]) ("nc-show-cursor" function (:arguments ("col" "lin")) nil [83977 84515]) ("nc-show-select" function (:arguments ("col" "lin")) nil [84517 84882]) ("nc-delete-select" function (:arguments ("col" "lin")) nil [84884 85352]) ("nc-toggle-write-title" function nil nil [85354 85463]) ("nc-toggle-write-totals" function nil nil [85465 85575]) ("nc-write-title" function (:arguments ("title" "&optional" "toponly")) nil [85577 88046]) ("nc-intern-frame" function (:arguments ("erase")) nil [88057 88523]) ("nc-find-files-for-buffer" function (:arguments ("&optional" "re-read")) nil [88534 89158]) ("nc-format-files-for-buffer" function (:arguments ("file-list")) nil [89160 89810]) ("nc-show-selected-files" function nil nil [90861 91405]) ("nc-display-buffer" function (:arguments ("&optional" "re-read" "no-frame")) nil [91407 92576]) ("nc-display-help-short" function nil nil [92578 92712]) ("or" code nil nil [92738 92836]) ("nc-write-modeline" function nil nil [92838 93671]) ("nc-write-totals-line" function nil nil [93673 96131]) ("nc-dir-size" function (:arguments ("dir")) nil [96133 96933]))
    :file "nc.el"
    :pointmax 96934
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ec.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "ec.el"
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cperl-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "cperl-mode.el"
    :unmatched-syntax 'nil
    )
   (semanticdb-table "htmlize.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [3652 3665]) ("when" code nil nil [3890 4096]) ("global-font-lock-mode" variable nil nil [3857 3887]) ("font-lock-support-mode" variable nil nil [3823 3854]) ("font-lock-auto-fontify" variable nil nil [3789 3820]) ("if" code nil nil [3687 3786]) ("htmlize-version" variable (:constant-flag t :default-value "1.31") nil [4099 4132]) ("if" code nil nil [4321 4836]) ("condition-case" code nil nil [4259 4318]) ("defgroup" code nil nil [4839 4925]) ("htmlize-head-tags" variable (:user-visible-flag t) nil [4927 5063]) ("htmlize-output-type" variable (:user-visible-flag t :default-value (quote css)) nil [5065 5736]) ("htmlize-generate-hyperlinks" variable (:user-visible-flag t :default-value t) nil [5738 6080]) ("htmlize-hyperlink-style" variable (:user-visible-flag t :default-value "
      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
") nil [6082 6406]) ("htmlize-replace-form-feeds" variable (:user-visible-flag t :default-value t) nil [6408 7169]) ("htmlize-html-charset" variable (:user-visible-flag t) nil [7171 8259]) ("htmlize-convert-nonascii-to-entities" variable (:user-visible-flag t :default-value (featurep (quote mule))) nil [8261 10006]) ("htmlize-css-name-prefix" variable (:user-visible-flag t) nil [10008 10388]) ("htmlize-use-rgb-txt" variable (:user-visible-flag t :default-value t) nil [10390 11149]) ("htmlize-html-major-mode" variable nil nil [11151 11461]) ("htmlize-before-hook" variable nil nil [11463 11616]) ("htmlize-after-hook" variable nil nil [11618 11838]) ("htmlize-file-hook" variable nil nil [11840 11947]) ("htmlize-running-xemacs" variable (:constant-flag t :default-value (string-match "XEmacs" emacs-version)) nil [12118 12189]) ("unless" code nil nil [13146 13502]) ("unless" code nil nil [12990 13143]) ("unless" code nil nil [12779 12987]) ("cond" code nil nil [14236 15643]) ("htmlize-basic-character-table" variable (:default-value (let ((table (make-vector 128 0))) (dotimes (i 128) (setf (aref table i) (if (and (>= i 32) (<= i 126)) (char-to-string i) (format "&#%d;" i)))) (setf (aref table 10) "
" (aref table 13) "" (aref table 9) "	" (aref table 38) "&amp;" (aref table 60) "&lt;" (aref table 62) "&gt;") table)) nil [15716 16632]) ("htmlize-extended-character-cache" variable (:default-value (make-hash-table :test (quote eq))) nil [17217 17286]) ("htmlize-protect-string" function (:arguments ("string")) nil [17288 18741]) ("htmlize-ellipsis" variable (:constant-flag t :default-value "...") nil [18743 18776]) ("put-text-property" code nil nil [18777 18861]) ("htmlize-buffer-substring-no-invisible" function (:arguments ("beg" "end")) nil [18863 21114]) ("htmlize-trim-ellipsis" function (:arguments ("text")) nil [21116 21475]) ("htmlize-tab-spaces" variable (:constant-flag t :default-value (let ((v (make-vector 32 nil))) (dotimes (i (length v)) (setf (aref v i) (make-string i 32))) v)) nil [21477 21744]) ("htmlize-untabify" function (:arguments ("text" "start-column")) nil [21746 23156]) ("htmlize-despam-address" function (:arguments ("string")) nil [23158 23485]) ("htmlize-make-hyperlinks" function nil nil [23487 24408]) ("htmlize-defang-local-variables" function nil nil [24697 25129]) ("if" code nil nil [25155 25396]) ("htmlize-x-library-search-path" variable (:default-value (quote ("/usr/X11R6/lib/X11/" "/usr/X11R5/lib/X11/" "/usr/lib/X11R6/X11/" "/usr/lib/X11R5/X11/" "/usr/local/X11R6/lib/X11/" "/usr/local/X11R5/lib/X11/" "/usr/local/lib/X11R6/X11/" "/usr/local/lib/X11R5/X11/" "/usr/X11/lib/X11/" "/usr/lib/X11/" "/usr/local/lib/X11/" "/usr/X386/lib/X11/" "/usr/x386/lib/X11/" "/usr/XFree86/lib/X11/" "/usr/unsupported/lib/X11/" "/usr/athena/lib/X11/" "/usr/local/x11r5/lib/X11/" "/usr/lpp/Xamples/lib/X11/" "/usr/openwin/lib/X11/" "/usr/openwin/share/lib/X11/"))) nil [25398 26002]) ("htmlize-get-color-rgb-hash" function (:arguments ("&optional" "rgb-file")) nil [26004 27207]) ("htmlize-color-rgb-hash" variable (:default-value (htmlize-get-color-rgb-hash)) nil [27358 27418]) ("htmlize-face-specifies-property" function (:arguments ("face" "prop")) nil [27440 28000]) ("htmlize-face-color-internal" function (:arguments ("face" "fg")) nil [28002 29404]) ("htmlize-face-foreground" function (:arguments ("face")) nil [29406 29788]) ("htmlize-face-background" function (:arguments ("face")) nil [29790 30174]) ("htmlize-color-to-rgb" function (:arguments ("color")) nil [30278 31659]) ("htmlize-fstruct" type (:members ("foreground" "background" "boldp" "italicp" "underlinep" "overlinep" "strikep" "css-name") :type "struct") nil [32071 32429]) ("htmlize-face-emacs21-attr" function (:arguments ("fstruct" "attr" "value")) nil [32431 33323]) ("htmlize-face-to-fstruct" function (:arguments ("face")) nil [33325 36378]) ("htmlize-attrlist-to-fstruct" function (:arguments ("attrlist")) nil [36712 37530]) ("htmlize-face-list-p" function (:arguments ("face-prop")) nil [37532 38487]) ("htmlize-make-face-map" function (:arguments ("faces")) nil [38489 39450]) ("htmlize-unstringify-face" function (:arguments ("face")) nil [39452 39618]) ("htmlize-faces-in-buffer" function nil nil [39620 41513]) ("cond" code nil nil [41860 44557]) ("htmlize-method" function (:arguments ("method" "&rest" "args")) nil [45418 45629]) ("htmlize-method-function" function (:arguments ("method")) nil [45631 45923]) ("htmlize-css-doctype" function nil nil [45956 46069]) ("htmlize-css-specs" function (:arguments ("fstruct")) nil [46107 46925]) ("htmlize-css-insert-head" function (:arguments ("buffer-faces" "face-map")) nil [46927 48181]) ("htmlize-css-insert-text" function (:arguments ("text" "fstruct-list" "buffer")) nil [48183 48691]) ("htmlize-font-doctype" function nil nil [48731 50100]) ("htmlize-font-body-tag" function (:arguments ("face-map")) nil [50102 50323]) ("htmlize-font-insert-text" function (:arguments ("text" "fstruct-list" "buffer")) nil [50325 51705]) ("htmlize-buffer-1" function nil nil [51707 56463]) ("htmlize-with-fontify-message" function (:arguments ("&rest" "body")) nil [56488 56960]) ("htmlize-ensure-fontified" function nil nil [56962 58212]) ("htmlize-buffer" function (:user-visible-flag t :arguments ("&optional" "buffer")) nil [58230 59120]) ("htmlize-region" function (:user-visible-flag t :arguments ("beg" "end")) nil [59137 59588]) ("htmlize-make-file-name" function (:arguments ("file")) nil [59590 60080]) ("htmlize-file" function (:user-visible-flag t :arguments ("file" "&optional" "target")) nil [60498 63153]) ("htmlize-many-files" function (:user-visible-flag t :arguments ("files" "&optional" "target-directory")) nil [63170 64467]) ("htmlize-many-files-dired" function (:user-visible-flag t :arguments ("arg" "&optional" "target-directory")) nil [64484 64674]) ("htmlize" package nil nil [64676 64694]))
    :file "htmlize.el"
    :pointmax 64721
    :unmatched-syntax 'nil
    )
   (semanticdb-table "highlight-tail.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("highlight-tail-version" variable (:constant-flag t :default-value "1.1") nil [410 497]) ("highlight-tail-colors-fade-table" variable nil nil [5384 5596]) ("highlight-tail-colors" variable (:user-visible-flag t :default-value (quote (("#bc2525" . 0) ("#000000" . 100)))) nil [5598 6113]) ("highlight-tail-steps" variable (:user-visible-flag t :default-value 80) nil [6115 6283]) ("highlight-tail-timer" variable (:user-visible-flag t :default-value 0.04) nil [6285 6416]) ("highlight-tail-posterior-type" variable (:user-visible-flag t :default-value (quote t)) nil [6418 6661]) ("highlight-tail-const-width" variable (:user-visible-flag t :default-value 10) nil [6663 6827]) ("highlight-tail-overlays-list" variable nil nil [6829 7235]) ("highlight-tail-const-overlays-list" variable nil nil [7237 7702]) ("highlight-tail-update-const-overlays-to-this-list" variable nil nil [7704 8017]) ("highlight-tail-face-max" variable nil nil [8019 8207]) ("highlight-tail-current-buffer" variable nil nil [8209 8333]) ("highlight-tail-internal-timer" variable nil nil [8335 8555]) ("highlight-tail-mode" variable (:user-visible-flag t) nil [8557 8625]) ("highlight-tail-post-command" function nil nil [8638 8879]) ("highlight-tail-make-new-overlays" function nil nil [8881 9251]) ("highlight-tail-make-new-overlays-posterior" function nil nil [9253 9880]) ("highlight-tail-make-new-overlay" function nil nil [9882 10965]) ("highlight-tail-make-const-overlays-list" function nil nil [10967 12506]) ("highlight-tail-update-const-overlays-list" function nil nil [12508 13989]) ("highlight-tail-process-overlays-list" function nil nil [13991 14489]) ("highlight-tail-process-overlays-list-posterior" function nil nil [14491 16107]) ("highlight-tail-overlays-list-hash-process" function (:arguments ("key" "value")) nil [16109 16910]) ("highlight-tail-make-colors-fade-table" function nil nil [16913 18032]) ("highlight-tail-find-colors-list" function (:arguments ("color-from" "color-to" "steps-count")) nil [18034 21678]) ("highlight-tail-choose-color-from-list-by-name" function (:arguments ("color-name")) nil [21680 22357]) ("highlight-tail-build-hex-color" function (:arguments ("red" "green" "blue")) nil [22359 22588]) ("highlight-tail-color-in-hex-format" function (:arguments ("color")) nil [22590 23060]) ("highlight-tail-make-faces" function (:arguments ("colors-list")) nil [23062 23721]) ("highlight-tail-lines-to-buffer-end" function (:arguments ("point")) nil [23723 23928]) ("highlight-tail-lines-to-buffer-start" function (:arguments ("point")) nil [23930 24282]) ("highlight-tail-line-beginning-position" function nil nil [24284 24534]) ("highlight-tail-line-end-position" function (:arguments ("n")) nil [24536 24817]) ("if" code nil nil [24819 25944]) ("highlight-tail-tide-up" function (:arguments ("&optional" "first-run")) nil [25946 26731]) ("highlight-tail-cancel-timer" function nil nil [26733 27026]) ("highlight-tail-overlays-list-tide-up" function (:arguments ("key" "value")) nil [27028 27240]) ("highlight-tail-reload" function nil nil [27242 29331]) ("highlight-tail-mode" function (:user-visible-flag t :arguments ("arg")) nil [29333 30231]) ("highlight-tail" package nil nil [30233 30258]))
    :file "highlight-tail.el"
    :pointmax 30292
    :unmatched-syntax 'nil
    )
   (semanticdb-table "perly-sense.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("perly-sense-current-line" function nil nil [4 157]) ("perly-sense-find-source-for-module" function (:arguments ("module")) nil [160 459]) ("perly-sense-find-source-for-module-at-point" function (:user-visible-flag t) nil [462 706]) ("perly-sense-display-pod-for-module" function (:arguments ("module")) nil [710 905]) ("perly-sense-display-pod-for-file" function (:arguments ("file" "name-buffer")) nil [907 1109]) ("perly-sense-display-pod-for-module-at-point" function (:user-visible-flag t) nil [1112 1347]) ("perly-sense-smart-docs" function (:arguments ("word")) nil [1352 1565]) ("perly-sense-result-text" function (:arguments ("result")) nil [1634 1739]) ("perly-sense-result-properties" function (:arguments ("result")) nil [1816 1924]) ("perly-sense-display-text-in-buffer" function (:arguments ("name" "text")) nil [1930 2258]) ("perly-sense-display-doc-message-or-buffer" function (:arguments ("doc-type" "name" "text")) nil [2261 2533]) ("perly-sense-fontify-pod-buffer" function (:user-visible-flag t :arguments ("buffer-name")) nil [2539 3017]) ("perly-sense-smart-docs-at-point" function (:user-visible-flag t) nil [3076 3964]) ("perly-sense-find-file-location" function (:arguments ("file" "row" "col")) nil [3970 4161]) ("perly-sense-smart-go-to" function (:arguments ("word")) nil [4170 4316]) ("perly-sense-smart-go-to-at-point" function (:user-visible-flag t) nil [4319 4972]))
    :file "perly-sense.el"
    :pointmax 5321
    :unmatched-syntax 'nil
    )
   (semanticdb-table "flymake.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("flymake-check-start-time" variable nil nil [1236 1269]) ("flymake-check-was-interrupted" variable nil nil [1270 1308]) ("flymake-err-info" variable nil nil [1309 1334]) ("flymake-is-running" variable nil nil [1335 1362]) ("flymake-last-change-time" variable nil nil [1363 1396]) ("flymake-new-err-info" variable nil nil [1397 1426]) ("if" code nil nil [1474 1968]) ("flymake-makehash" function (:arguments ("&optional" "test")) nil [2021 2207]) ("defalias" code nil nil [2209 2441]) ("flymake-replace-regexp-in-string" function (:arguments ("regexp" "rep" "str")) nil [2443 2626]) ("flymake-split-string" function (:arguments ("str" "pattern")) nil [2628 3112]) ("flymake-get-temp-dir" function nil nil [3114 3233]) ("defalias" code nil nil [3235 3429]) ("defalias" code nil nil [3431 3601]) ("flymake-popup-menu" function (:arguments ("pos" "menu-data")) nil [3603 4370]) ("flymake-make-emacs-menu" function (:arguments ("menu-data")) nil [4372 4855]) ("if" code nil nil [4857 5700]) ("flymake-current-row" function nil nil [5712 5936]) ("flymake-selected-frame" function nil nil [5938 6047]) ("flymake-log-level" variable (:default-value -1) nil [6058 6255]) ("flymake-log" function (:arguments ("level" "text" "&rest" "args")) nil [6257 6830]) ("flymake-ins-after" function (:arguments ("list" "pos" "val")) nil [6832 7033]) ("flymake-set-at" function (:arguments ("list" "pos" "val")) nil [7035 7196]) ("flymake-pid-to-names" variable (:default-value (flymake-makehash)) nil [7198 7315]) ("flymake-reg-names" function (:arguments ("pid" "source-buffer-name")) nil [7317 7573]) ("flymake-get-source-buffer-name" function (:arguments ("pid")) nil [7575 7734]) ("flymake-unreg-names" function (:arguments ("pid")) nil [7736 7876]) ("flymake-buffer-data" variable (:default-value (flymake-makehash)) nil [7878 7986]) ("make-variable-buffer-local" code nil nil [7988 8037]) ("flymake-get-buffer-value" function (:arguments ("buffer" "name")) nil [8039 8151]) ("flymake-set-buffer-value" function (:arguments ("buffer" "name" "value")) nil [8153 8277]) ("flymake-output-residual" variable nil nil [8279 8315]) ("make-variable-buffer-local" code nil nil [8317 8370]) ("flymake-allowed-file-name-masks" variable (:user-visible-flag t :default-value (quote ((".+\\.c$" flymake-simple-make-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.cpp$" flymake-simple-make-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.xml$" flymake-xml-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.html?$" flymake-xml-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.cs$" flymake-simple-make-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.pl$" flymake-perl-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.pm$" flymake-perl-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.h$" flymake-master-make-header-init flymake-master-cleanup flymake-get-real-file-name) (".+\\.java$" flymake-simple-make-java-init flymake-simple-java-cleanup flymake-get-real-file-name) (".+[0-9]+\\.tex$" flymake-master-tex-init flymake-master-cleanup flymake-get-real-file-name) (".+\\.tex$" flymake-simple-tex-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.idl$" flymake-simple-make-init flymake-simple-cleanup flymake-get-real-file-name)))) nil [8372 9971]) ("flymake-get-file-name-mode-and-masks" function (:arguments ("file-name")) nil [9973 10490]) ("flymake-can-syntax-check-file" function (:arguments ("file-name")) nil [10492 10689]) ("flymake-get-init-function" function (:arguments ("file-name")) nil [10691 10957]) ("flymake-get-cleanup-function" function (:arguments ("file-name")) nil [10959 11119]) ("flymake-get-real-file-name-function" function (:arguments ("file-name")) nil [11121 11268]) ("flymake-buildfile-dirs" variable (:default-value (quote ("." ".." "../.." "../../.." "../../../.." "../../../../.." "../../../../../.." "../../../../../../.." "../../../../../../../.." "../../../../../../../../.." "../../../../../../../../../.." "../../../../../../../../../../.."))) nil [11270 11608]) ("flymake-find-buildfile-cache" variable (:default-value (flymake-makehash (quote equal))) nil [11610 11673]) ("flymake-get-buildfile-from-cache" function (:arguments ("dir-name")) nil [11675 11776]) ("flymake-add-buildfile-to-cache" function (:arguments ("dir-name" "buildfile")) nil [11778 11897]) ("flymake-clear-buildfile-cache" function nil nil [11899 11980]) ("flymake-find-buildfile" function (:arguments ("buildfile-name" "source-dir-name" "dirs")) nil [11982 12933]) ("flymake-fix-file-name" function (:arguments ("name")) nil [12935 13383]) ("flymake-same-files" function (:arguments ("file-name-one" "file-name-two")) nil [13385 13622]) ("flymake-get-common-file-prefix" function (:arguments ("string-one" "string-two")) nil [13624 14051]) ("flymake-build-relative-filename" function (:arguments ("from-dir" "to-dir")) nil [14053 15191]) ("flymake-master-file-dirs" variable (:default-value (quote ("." "./src" "./UnitTest"))) nil [15193 15343]) ("flymake-master-file-count-limit" variable (:default-value 32) nil [15345 15467]) ("flymake-included-file-name" variable nil nil [15544 15579]) ("flymake-find-possible-master-files" function (:arguments ("file-name" "master-file-dirs" "masks")) nil [15581 16961]) ("flymake-master-file-compare" function (:arguments ("file-one" "file-two")) nil [16963 17380]) ("flymake-check-file-limit" variable (:default-value 8192) nil [17382 17529]) ("flymake-check-patch-master-file-buffer" function (:arguments ("master-file-temp-buffer" "master-file-name" "patched-master-file-name" "source-file-name" "patched-source-file-name" "include-dirs" "regexp-list")) nil [17531 20093]) ("flymake-replace-region" function (:arguments ("beg" "end" "rep")) nil [20095 20357]) ("flymake-read-file-to-temp-buffer" function (:arguments ("file-name")) nil [20359 20696]) ("flymake-copy-buffer-to-temp-buffer" function (:arguments ("buffer")) nil [20698 21114]) ("flymake-check-include" function (:arguments ("source-file-name" "inc-path" "inc-name" "include-dirs")) nil [21116 21892]) ("flymake-find-buffer-for-file" function (:arguments ("file-name")) nil [21894 22124]) ("flymake-create-master-file" function (:arguments ("source-file-name" "patched-source-file-name" "get-incl-dirs-f" "create-temp-f" "masks" "include-regexp-list")) nil [22126 23682]) ("flymake-save-buffer-in-file" function (:arguments ("buffer" "file-name")) nil [23684 24049]) ("flymake-save-string-to-file" function (:arguments ("file-name" "data")) nil [24051 24187]) ("flymake-read-file-to-string" function (:arguments ("file-name")) nil [24189 24401]) ("flymake-process-filter" function (:arguments ("process" "output")) nil [24403 24824]) ("flymake-process-sentinel" function (:arguments ("process" "event")) nil [24826 26013]) ("flymake-post-syntax-check" function (:arguments ("source-buffer" "exit-status" "command")) nil [26015 27547]) ("flymake-parse-output-and-residual" function (:arguments ("source-buffer" "output")) nil [27549 28231]) ("flymake-parse-residual" function (:arguments ("source-buffer")) nil [28233 28580]) ("flymake-err-info" variable nil nil [28582 28695]) ("make-variable-buffer-local" code nil nil [28697 28743]) ("flymake-er-make-er" function (:arguments ("line-no" "line-err-info-list")) nil [28745 28836]) ("flymake-er-get-line" function (:arguments ("err-info")) nil [28838 28895]) ("flymake-er-get-line-err-info-list" function (:arguments ("err-info")) nil [28897 28968]) ("flymake-new-err-info" variable nil nil [28970 29081]) ("make-variable-buffer-local" code nil nil [29083 29133]) ("flymake-ler-make-ler" function (:arguments ("file" "line" "type" "text" "&optional" "full-file")) nil [29199 29308]) ("flymake-ler-get-file" function (:arguments ("line-err-info")) nil [29310 29378]) ("flymake-ler-get-line" function (:arguments ("line-err-info")) nil [29380 29448]) ("flymake-ler-get-type" function (:arguments ("line-err-info")) nil [29450 29518]) ("flymake-ler-get-text" function (:arguments ("line-err-info")) nil [29520 29588]) ("flymake-ler-get-full-file" function (:arguments ("line-err-info")) nil [29590 29663]) ("flymake-ler-set-file" function (:arguments ("line-err-info" "file")) nil [29665 29909]) ("flymake-ler-set-full-file" function (:arguments ("line-err-info" "full-file")) nil [29911 30165]) ("flymake-ler-set-line" function (:arguments ("line-err-info" "line")) nil [30167 30411]) ("flymake-get-line-err-count" function (:arguments ("line-err-info-list" "type")) nil [30413 30824]) ("flymake-get-err-count" function (:arguments ("err-info-list" "type")) nil [30826 31191]) ("flymake-fix-line-numbers" function (:arguments ("err-info-list" "min-line" "max-line")) nil [31193 32063]) ("flymake-highlight-err-lines" function (:arguments ("buffer" "err-info-list")) nil [32065 32418]) ("flymake-overlay-p" function (:arguments ("ov")) nil [32420 32563]) ("flymake-make-overlay" function (:arguments ("beg" "end" "tooltip-text" "face" "mouse-face")) nil [32565 33138]) ("flymake-delete-own-overlays" function (:arguments ("buffer")) nil [33140 33474]) ("flymake-region-has-flymake-overlays" function (:arguments ("beg" "end")) nil [33476 33884]) ("flymake-errline" variable (:default-value (quote ((((class color)) (:background "LightPink")) (t (:bold t))))) nil [33886 34163]) ("put" code nil nil [34196 34252]) ("flymake-warnline" variable (:default-value (quote ((((class color)) (:background "LightBlue2")) (t (:bold t))))) nil [34254 34407]) ("put" code nil nil [34440 34498]) ("flymake-highlight-line" function (:arguments ("line-no" "line-err-info-list")) nil [34500 35578]) ("flymake-parse-err-lines" function (:arguments ("err-info-list" "source-buffer" "lines")) nil [35580 36707]) ("flymake-split-output" function (:arguments ("output")) nil [36709 37195]) ("flymake-reformat-err-line-patterns-from-compile-el" function (:arguments ("original-list")) nil [37197 37834]) ("compile" include nil nil [37857 37875]) ("flymake-err-line-patterns" variable (:default-value (append (quote (("\\(\\([a-zA-Z]:\\)?[^:(	
]+\\)(\\([0-9]+\\)) : \\(\\(error\\|warning\\|fatal error\\) \\(C[0-9]+\\):[ 	
]*\\(.+\\)\\)" 1 3 nil 4) ("\\(\\([a-zA-Z]:\\)?[^:(	
]+\\):\\([0-9]+\\):[0-9]+:[0-9]+:[0-9]+: \\(\\(Error\\|Warning\\|Caution\\|Semantic Error\\):[ 	
]*\\(.+\\)\\)" 1 3 nil 4) ("midl[ ]*:[ ]*\\(command line error .*\\)" nil nil nil 1) ("\\(\\([a-zA-Z]:\\)?[^:(	
]+\\)(\\([0-9]+\\),[0-9]+): \\(\\(error\\|warning\\|fatal error\\) \\(CS[0-9]+\\):[ 	
]*\\(.+\\)\\)" 1 3 nil 4) ("\\(.*\\) at \\([^ 
]+\\) line \\([0-9]+\\)[,.
]" 2 3 nil 1) (" *\\(\\[javac\\]\\)? *\\(\\([a-zA-Z]:\\)?[^:(	
]+\\):\\([0-9]+\\):[ 	
]*\\(.+\\)" 2 4 nil 5))) compilation-error-regexp-alist)) nil [37878 39285]) ("flymake-parse-line" function (:arguments ("line")) nil [39841 41038]) ("flymake-find-err-info" function (:arguments ("err-info-list" "line-no")) nil [41040 41575]) ("flymake-line-err-info-is-less-or-equal" function (:arguments ("line-one" "line-two")) nil [41577 42150]) ("flymake-add-line-err-info" function (:arguments ("line-err-info-list" "line-err-info")) nil [42152 43021]) ("flymake-add-err-info" function (:arguments ("err-info-list" "line-err-info")) nil [43023 44209]) ("flymake-get-project-include-dirs-imp" function (:arguments ("basedir")) nil [44211 45342]) ("flymake-get-project-include-dirs-function" variable (:default-value (quote flymake-get-project-include-dirs-imp)) nil [45344 45547]) ("flymake-get-project-include-dirs" function (:arguments ("basedir")) nil [45549 45661]) ("flymake-get-system-include-dirs" function nil nil [45663 45873]) ("flymake-project-include-dirs-cache" variable (:default-value (flymake-makehash (quote equal))) nil [45875 45944]) ("flymake-get-project-include-dirs-from-cache" function (:arguments ("base-dir")) nil [45946 46064]) ("flymake-add-project-include-dirs-to-cache" function (:arguments ("base-dir" "include-dirs")) nil [46066 46208]) ("flymake-clear-project-include-dirs-cache" function nil nil [46210 46308]) ("flymake-get-include-dirs" function (:arguments ("base-dir")) nil [46310 46543]) ("flymake-restore-formatting" function (:arguments ("source-buffer")) nil [46545 46641]) ("flymake-get-program-dir" function (:arguments ("buffer")) nil [46643 46826]) ("flymake-safe-delete-file" function (:arguments ("file-name")) nil [46828 46999]) ("flymake-safe-delete-directory" function (:arguments ("dir-name")) nil [47001 47241]) ("flymake-compilation-prevents-syntax-check" variable (:default-value t) nil [47243 47411]) ("flymake-start-syntax-check" function (:arguments ("buffer")) nil [47413 48732]) ("flymake-start-syntax-check-process" function (:arguments ("buffer" "cmd" "args" "dir")) nil [48734 50023]) ("flymake-kill-process" function (:arguments ("pid" "&optional" "rest")) nil [50025 50372]) ("flymake-stop-all-syntax-checks" function (:user-visible-flag t) nil [50374 50566]) ("flymake-compilation-is-running" function nil nil [50568 50682]) ("flymake-compile" function (:user-visible-flag t) nil [50684 50848]) ("flymake-is-running" variable nil nil [50850 50955]) ("make-variable-buffer-local" code nil nil [50957 51005]) ("flymake-timer" variable nil nil [51007 51070]) ("make-variable-buffer-local" code nil nil [51072 51115]) ("flymake-last-change-time" variable nil nil [51117 51186]) ("make-variable-buffer-local" code nil nil [51188 51242]) ("flymake-check-start-time" variable nil nil [51244 51325]) ("make-variable-buffer-local" code nil nil [51327 51381]) ("flymake-check-was-interrupted" variable nil nil [51383 51486]) ("make-variable-buffer-local" code nil nil [51488 51547]) ("flymake-no-changes-timeout" variable (:default-value 0.5) nil [51549 51689]) ("flymake-on-timer-event" function (:arguments ("buffer")) nil [51691 52165]) ("flymake-start-syntax-check-for-current-buffer" function (:user-visible-flag t) nil [52167 52372]) ("flymake-current-line-no" function (:user-visible-flag t) nil [52374 52590]) ("flymake-count-lines" function (:arguments ("buffer")) nil [52592 52746]) ("flymake-get-point-pixel-pos" function nil nil [52748 53310]) ("flymake-display-err-menu-for-current-line" function (:user-visible-flag t) nil [53312 54065]) ("flymake-make-err-menu-data" function (:arguments ("line-no" "line-err-info-list")) nil [54067 55326]) ("flymake-goto-file-and-line" function (:arguments ("file" "line")) nil [55328 55576]) ("flymake-mode-line" variable nil nil [55613 55643]) ("make-variable-buffer-local" code nil nil [55645 55692]) ("flymake-mode-line-e-w" variable nil nil [55694 55728]) ("make-variable-buffer-local" code nil nil [55730 55781]) ("flymake-mode-line-status" variable nil nil [55783 55820]) ("make-variable-buffer-local" code nil nil [55822 55876]) ("flymake-report-status" function (:arguments ("buffer" "e-w" "&optional" "status")) nil [55878 56409]) ("flymake-display-warning" function (:arguments ("warning")) nil [56411 56507]) ("flymake-gui-warnings-enabled" variable (:default-value t) nil [56509 56621]) ("flymake-report-fatal-status" function (:arguments ("buffer" "status" "warning")) nil [56623 57055]) ("flymake-start-syntax-check-on-find-file" variable (:default-value t) nil [57057 57182]) ("define-minor-mode" code nil nil [57199 58663]) ("flymake-mode-on" function nil nil [58680 58822]) ("flymake-mode-off" function nil nil [58839 58984]) ("flymake-start-syntax-check-on-newline" variable (:default-value t) nil [58986 59146]) ("flymake-after-change-function" function (:arguments ("start" "stop" "len")) nil [59148 59653]) ("flymake-after-save-hook" function nil nil [59655 59950]) ("flymake-kill-buffer-hook" function nil nil [60034 60154]) ("flymake-find-file-hook" function nil nil [60156 60570]) ("flymake-get-first-err-line-no" function (:arguments ("err-info-list")) nil [60572 60728]) ("flymake-get-last-err-line-no" function (:arguments ("err-info-list")) nil [60730 60912]) ("flymake-get-next-err-line-no" function (:arguments ("err-info-list" "line-no")) nil [60914 61278]) ("flymake-get-prev-err-line-no" function (:arguments ("err-info-list" "line-no")) nil [61280 61646]) ("flymake-skip-whitespace" function nil nil [61648 61782]) ("flymake-goto-line" function (:arguments ("line-no")) nil [61784 61915]) ("flymake-goto-next-error" function (:user-visible-flag t) nil [61917 62331]) ("flymake-goto-prev-error" function (:user-visible-flag t) nil [62333 62756]) ("flymake-patch-err-text" function (:arguments ("string")) nil [62758 62892]) ("flymake-create-temp-inplace" function (:arguments ("file-name" "prefix")) nil [62940 63384]) ("flymake-create-temp-with-folder-structure" function (:arguments ("file-name" "prefix")) nil [63386 63817]) ("flymake-strrchr" function (:arguments ("str" "ch")) nil [63819 64041]) ("flymake-delete-temp-directory" function (:arguments ("dir-name")) nil [64043 64667]) ("flymake-init-create-temp-buffer-copy" function (:arguments ("buffer" "create-temp-f")) nil [64669 65151]) ("flymake-simple-cleanup" function (:arguments ("buffer")) nil [65153 65492]) ("flymake-get-real-file-name" function (:arguments ("buffer" "file-name-from-err-msg")) nil [65494 67125]) ("flymake-get-full-patched-file-name" function (:arguments ("file-name-from-err-msg" "base-dirs" "files")) nil [67127 68054]) ("flymake-get-full-nonpatched-file-name" function (:arguments ("file-name-from-err-msg" "base-dirs")) nil [68056 68608]) ("flymake-init-find-buildfile-dir" function (:arguments ("buffer" "source-file-name" "buildfile-name")) nil [68610 69246]) ("flymake-init-create-temp-source-and-master-buffer-copy" function (:arguments ("buffer" "get-incl-dirs-f" "create-temp-f" "master-file-masks" "include-regexp-list")) nil [69248 70364]) ("flymake-master-cleanup" function (:arguments ("buffer")) nil [70366 70526]) ("flymake-get-syntax-check-program-args" function (:arguments ("source-file-name" "base-dir" "use-relative-base-dir" "use-relative-source" "get-cmd-line-f")) nil [70569 71222]) ("flymake-get-make-cmdline" function (:arguments ("source" "base-dir")) nil [71224 71420]) ("flymake-get-ant-cmdline" function (:arguments ("source" "base-dir")) nil [71422 71610]) ("flymake-simple-make-init-impl" function (:arguments ("buffer" "create-temp-f" "use-relative-base-dir" "use-relative-source" "build-file-name" "get-cmdline-f")) nil [71612 72323]) ("flymake-simple-make-init" function (:arguments ("buffer")) nil [72325 72477]) ("flymake-master-make-init" function (:arguments ("buffer" "get-incl-dirs-f" "master-file-masks" "include-regexp-list")) nil [72479 73181]) ("flymake-find-make-buildfile" function (:arguments ("source-dir")) nil [73183 73303]) ("flymake-master-make-header-init" function (:arguments ("buffer")) nil [73327 73557]) ("flymake-simple-make-java-init" function (:arguments ("buffer")) nil [73584 73759]) ("flymake-simple-ant-java-init" function (:arguments ("buffer")) nil [73761 73935]) ("flymake-simple-java-cleanup" function (:arguments ("buffer")) nil [73937 74322]) ("flymake-perl-init" function (:arguments ("buffer")) nil [74365 74745]) ("flymake-get-tex-args" function (:arguments ("file-name")) nil [74787 74955]) ("flymake-simple-tex-init" function (:arguments ("buffer")) nil [74957 75097]) ("flymake-master-tex-init" function (:arguments ("buffer")) nil [75099 75458]) ("flymake-get-include-dirs-dot" function (:arguments ("base-dir")) nil [75460 75516]) ("flymake-xml-init" function (:arguments ("buffer")) nil [75558 75694]) ("setenv" code nil nil [75697 75882]) ("flymake" package nil nil [75884 75902]))
    :file "flymake.el"
    :pointmax 75979
    )
   (semanticdb-table "eldoc.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("or" code nil nil [2219 2262]) ("defgroup" code nil nil [2264 2398]) ("eldoc-mode" variable (:user-visible-flag t) nil [2415 3006]) ("make-variable-buffer-local" code nil nil [3007 3047]) ("eldoc-idle-delay" variable (:user-visible-flag t :default-value 0.5) nil [3049 3351]) ("eldoc-minor-mode-string" variable (:user-visible-flag t :default-value " ElDoc") nil [3368 3508]) ("eldoc-argument-case" variable (:default-value (quote upcase)) nil [3510 3885]) ("eldoc-echo-area-use-multiline-p" variable (:user-visible-flag t :default-value (quote truncate-sym-name-if-fit)) nil [3887 4998]) ("eldoc-echo-area-multiline-supported-p" variable (:default-value (and (string-lessp "21" emacs-version) (save-match-data (numberp (string-match "^GNU Emacs" (emacs-version)))))) nil [5112 5288]) ("eldoc-message-commands" variable nil nil [5786 5821]) ("eldoc-message-commands-table-size" variable (:default-value 31) nil [6179 6224]) ("eldoc-last-data" variable (:default-value (make-vector 3 nil)) nil [6543 6587]) ("eldoc-last-message" variable nil nil [6588 6619]) ("eldoc-use-idle-timer-p" variable (:default-value (fboundp (quote run-with-idle-timer))) nil [6676 6738]) ("eldoc-timer" variable nil nil [6786 6810]) ("eldoc-current-idle-delay" variable (:default-value eldoc-idle-delay) nil [6931 6981]) ("cond" code nil nil [7055 7393]) ("eldoc-mode" function (:user-visible-flag t :arguments ("&optional" "prefix")) nil [7411 8935]) ("turn-on-eldoc-mode" function (:user-visible-flag t) nil [8952 9081]) ("eldoc-schedule-timer" function nil nil [9134 9623]) ("eldoc-message" function (:arguments ("&rest" "args")) nil [9625 10891]) ("eldoc-pre-command-refresh-echo-area" function nil nil [11314 11526]) ("eldoc-display-message-p" function nil nil [11587 12663]) ("eldoc-display-message-no-interference-p" function nil nil [12801 13176]) ("eldoc-print-current-symbol-info" function nil nil [13179 13785]) ("eldoc-get-fnsym-args-string" function (:arguments ("sym")) nil [13956 14700]) ("eldoc-get-var-docstring" function (:arguments ("sym")) nil [14793 15286]) ("eldoc-last-data-store" function (:arguments ("symbol" "doc" "type")) nil [15288 15432]) ("eldoc-docstring-first-line" function (:arguments ("doc")) nil [15543 15925]) ("eldoc-docstring-format-sym-doc" function (:arguments ("sym" "doc")) nil [16090 17291]) ("eldoc-fnsym-in-current-sexp" function nil nil [17294 17584]) ("eldoc-beginning-of-sexp" function nil nil [17586 17869]) ("eldoc-current-symbol" function nil nil [17929 18086]) ("eldoc-symbol-function" function (:arguments ("fsym")) nil [18136 18401]) ("eldoc-function-arglist" function (:arguments ("fn")) nil [18403 19058]) ("eldoc-function-argstring" function (:arguments ("fn")) nil [19060 19161]) ("eldoc-function-argstring-format" function (:arguments ("arglist")) nil [19163 20036]) ("eldoc-function-argstring-from-docstring-method-table" variable (:default-value (list (list (function (lambda (doc fn) (string-match (format "^(%s[^
)]*)$" fn) doc))) (function (lambda (doc) (let ((end (- (match-end 0) 1))) (if (string-match " +" doc (match-beginning 0)) (substring doc (match-end 0) end) ""))))) (list (function (lambda (doc fn) (and (not (eq fn (quote save-restriction))) (string-match "^([^
)]+)$" doc)))) (function (lambda (doc) (let ((end (- (match-end 0) 1))) (and (string-match " +" doc (match-beginning 0)) (substring doc (match-end 0) end)))))) (list (function (lambda (doc fn) (string-match "^([^
)]+):" doc))) (function (lambda (doc) (let ((end (- (match-end 0) 2))) (and (string-match " +" doc (match-beginning 0)) (substring doc (match-end 0) end)))))) (list (function (lambda (doc fn) (string-match "^arguments: (\\([^
)]+\\))" doc))) (function (lambda (doc) (substring doc (match-beginning 1) (match-end 1))))) (list (function (lambda (doc fn) (string-match (format "^Usage looks like \\((%s[^
)]*)\\)\\.$" fn) doc))) (function (lambda (doc) (let ((end (- (match-end 1) 1))) (and (string-match " +" doc (match-beginning 1)) (substring doc (match-end 0) end)))))) (list (function (lambda (doc fn) (string-match (format "^[ 	]+\\((%s[^
)]*)\\)$" fn) doc))) (function (lambda (doc) (let ((end (- (match-end 1) 1))) (and (string-match " +" doc (match-beginning 1)) (substring doc (match-end 0) end)))))) (list (function (lambda (doc fn) (string-match "^Args are +\\([^
]+\\)$" doc))) (function (lambda (doc) (substring doc (match-beginning 1) (match-end 1))))) (list (function (lambda (doc fn) (memq fn (quote (and or list + -))))) (function (lambda (doc) nil "&rest args"))))) nil [20725 24891]) ("eldoc-function-argstring-from-docstring" function (:arguments ("fn")) nil [24893 26089]) ("eldoc-add-command" function (:arguments ("&rest" "cmds")) nil [26425 26969]) ("eldoc-add-command-completions" function (:arguments ("&rest" "names")) nil [26971 27162]) ("eldoc-remove-command" function (:arguments ("&rest" "cmds")) nil [27164 27556]) ("eldoc-remove-command-completions" function (:arguments ("&rest" "names")) nil [27558 27755]) ("eldoc-add-command-completions" code nil nil [27785 28076]) ("eldoc" package nil nil [28078 28094]))
    :file "eldoc.el"
    :pointmax 28119
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
